---
import Section from '../../ui/Section.astro'
import Row from '../../ui/Row.astro'
import Col from '../../ui/Col.astro'
import moviesData from './favoriteMovies.json'
---

<Section id="intro" padding="top" classes="bg-neutral-50 dark:bg-neutral-900 pb-10">
	<Row>
		<Col span="2" />
		<Col span="8" align="center">
			<h1>My <strong>Favorite Movies</strong> Ranked</h1>
			<p class="pb-0 text-lg">Starting with the best...</p>

			<div class="movie-grid">
				{
					moviesData.map((movie, index) => (
						<div class="movie-wrapper" key={`movie-${index}`}>
							<div class="number">#{index + 1}</div>
							<div class="movie-card" data-expanded="false">
								<div class="movie-content">
									<a href={movie.pageUrl} target="_blank" class="movie-link">
										<h2 class="movie-title">{movie.title}</h2>
									</a>
									<div class="movie-year">{movie.year}</div>
									<a href={movie.pageUrl} target="_blank" class="movie-link">
										<img src={movie.imageUrl} alt={movie.title} class="movie-cover" />
									</a>
									<p class="movie-description collapsed">{movie.description}</p>
									<button class="expand-button" style="display: none;">
										Expand
									</button>
								</div>
							</div>
						</div>
					))
				}
			</div>
		</Col>
	</Row>

	<script>
		document.addEventListener('DOMContentLoaded', () => {
			const cards = document.querySelectorAll('.movie-card')

			cards.forEach((card) => {
				const button = card.querySelector('.expand-button')
				const description = card.querySelector('.movie-description')
				const title = card.querySelector('.movie-title')
				const originalHeight = card.offsetHeight

				const checkDescriptionOverflow = () => {
					if (description) {
						const isOverflowing = description.scrollHeight > description.clientHeight
						if (button) button.style.display = isOverflowing ? 'block' : 'none'

						const titleLineCount = Math.ceil(
							title.offsetHeight / parseFloat(getComputedStyle(title).lineHeight)
						)
						const clampValue = titleLineCount > 1 ? 4 : 5
						description.style.setProperty('--line-clamp', clampValue)
					}
				}

				checkDescriptionOverflow()

				button?.addEventListener('click', () => {
					const isExpanded = card.getAttribute('data-expanded') === 'true'

					if (isExpanded) {
						card.setAttribute('data-expanded', 'false')
						description?.classList.add('collapsed')
						description?.classList.remove('expanded')
						button.textContent = 'Expand'
						card.style.height = `${originalHeight}px`
					} else {
						card.setAttribute('data-expanded', 'true')
						description?.classList.remove('collapsed')
						description?.classList.add('expanded')
						button.textContent = 'Show Less'
						card.style.height = `${card.scrollHeight}px`
					}
				})
			})
		})

		let lastOpenedTab: Window | null = null

		function openLink(url: string) {
			if (lastOpenedTab && !lastOpenedTab.closed) {
				lastOpenedTab.location.href = url
				lastOpenedTab.focus()
			} else {
				lastOpenedTab = window.open(url, '_blank')
			}
		}

		document.addEventListener('DOMContentLoaded', () => {
			const links = document.querySelectorAll('.movie-link')
			links.forEach((link) => {
				link.addEventListener('click', (event) => {
					event.preventDefault()
					const url = (event.currentTarget as HTMLAnchorElement)?.getAttribute('href')
					if (url) openLink(url)
				})
			})
		})
	</script>
</Section>

<style>
	/* Flexbox grid for movie cards */
	.movie-grid {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		gap: 20px;
		padding: 20px 0;
	}
	.movie-card {
		background-color: #fff;
		border-radius: 10px;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		overflow: hidden;
		width: 310px;
		height: 655px;
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 15px;
		position: relative;
		transition: box-shadow 0.2s ease;
	}
	.movie-card:hover {
		box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
	}
	.movie-wrapper {
		position: relative;
	}
	.number {
		font-size: 1rem;
		color: #fff;
		position: absolute;
		top: -12px;
		left: -10px;
		background-color: #e2187d;
		border-radius: 5px;
		padding: 0px 5px;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		z-index: 10;
	}
	.movie-content {
		text-align: center;
	}
	.movie-cover {
		width: 100%;
		height: auto;
		border-radius: 8px;
		transition:
			transform 0.3s ease,
			filter 0.3s ease;
		margin-top: 15px;
	}
	.movie-cover:hover {
		filter: brightness(1.1);
	}
	.movie-title {
		margin-top: 0px;
		margin-bottom: 0px;
		font-size: 1.25rem;
		color: #e2187d;
		font-weight: bold;
		transition: color 0.2s ease;
	}
	.movie-title:hover {
		text-decoration: underline;
		color: #c4166b;
	}
	.movie-description {
		margin-top: 10px;
		margin-bottom: 5px;
		font-size: 0.9rem;
		color: #666;
		overflow: hidden;
		transition: max-height 0.3s ease;
		display: -webkit-box;
		-webkit-line-clamp: var(--line-clamp, 5);
		-webkit-box-orient: vertical;
	}
	.movie-description.collapsed {
		overflow: hidden;
		max-height: calc(var(--line-clamp, 5) * 1.2em);
	}
	.movie-description.expanded {
		overflow: visible;
		-webkit-line-clamp: none;
		-webkit-box-orient: unset;
		max-height: none;
	}
	.expand-button {
		background-color: transparent;
		border: none;
		color: #e2187d;
		cursor: pointer;
		font-size: 0.9rem;
		margin-top: 0px;
		width: -webkit-fill-available;
		transition: color 0.2s ease;
	}
	.expand-button:hover {
		text-decoration: underline;
		color: #c4166b;
	}
</style>
